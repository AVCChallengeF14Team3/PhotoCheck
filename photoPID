# include <stdio.h>
# include <time.h>

extern "C" int init( int d_lev);
extern "C" int Sleep( int sec, int usec );
extern "C" int set_motor( int motor, int dir, int speed );
extern "C" char get_pixel(int row, int col, int colour);
extern "C" take_picture();

int main (){

init (1);
int rightMotorSpeed = 0;
int leftMotorSpeed = 0;
int sum = 0;
v_right = 100;
v_left = 100;
int i;                  
int whiteValue;
int s;                  // Yet to use this value.
int whiteOrBlack[15];   // White = 1, Black = 0

unsigned long lastTime;
double pidOutput;
double errorSum, lastError;
double kp, ki, kd;

take_picture();
int open_screen_stream();

//
for(i = 0, i < 16, i++){
    whiteValue = get_pixel(i*20, 120, 3);
    if(whiteValue > 127){
        whiteOrBlack[i] = 1;
    }
    else{
        whiteOrBlack[i] = 0;
    }
}

if( (whiteOrBlack[i]==0) && (whiteOrBlack[i+1]==1) ){
    int startOfWhite = i;
}

if( (whiteOrBlack[i] == 1) && (whiteOrBlack[i + 1] == 0) ){ 
    int endOfWhite = i;
}

float centerofWhite = (startOfWhite + endOfWhite)/2;
float errorValue = centerOfWhite - 7.5;

void Compute()
{
  unsigned long currentTime = millis;
  double timeChange = (currentTime-lastTime);
   
  //this calculates the integral component
  errorSum += (errorValue*timeChange);
  
  //calculating the derivative component
  double dError = (errorValue - lastError)/timeChange
  
  //computing the PID output
  pidOutput = kp*error + ki*errorSum + kd*dError;
  
  //this bit remembers the variables we just used
  lastError = errorValue;
  lastTime = currentTime;
}

void setConstants(){
  kp = (INSERT CONSTANT HERE);
  ki = (INSERT CONSTANT HERE);
  kd = (INSERT CONSTANT HERE);
}

//need to change this bit using the PID error
int rightMotorSpeed = 15 + errorValue;
int leftMotorSpeed = 15 - errorValue;

set_motor(1, leftMotorSpeed);
set_motor(2, rightMotorSpeed);
printf("%d%n",w);
